worker_processes 1;

# This config used the example config
# from http://docs.gunicorn.org/en/stable/deploy.html as starting point.

user nobody nogroup;
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    # TODO: This could result in failure, if the docker config for the django container changes.
    # The IP is hardcoded twice, here and in docker-compose.yml which is not optimal.
    # Ingesting ENV variables could solve this but does not seam to be trivial with the nginx.conf. 
    server 172.16.238.10:8000 fail_timeout=0;
    #for UNIX domain socket setups
    #server unix:/tmp/gunicorn.sock fail_timeout=0;
  }

  server {
    # if no Host match, close the connection to prevent host spoofing
    listen 80 default_server;
    return 444;
  }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80;
    listen 442 ssl http2;
    client_max_body_size 4G;

    # set the correct host(s) for your site
    server_name REPLACE_ME;

    # ssl setup
    ssl_certificate     REPLACE_ME;
    ssl_certificate_key REPLACE_ME;
    ssl_protocols       TLSv1 TLSv1.1 TLSv1.2;
    ssl_cyphers         HIGH: !aNULL: !MD5;

    access_log /var/log/nginx/ssl-access combined;

    keepalive_timeout 5;

    # path for static files
    root /usr/src/app/;

    # gzip static files
    gzip on;
    gzip_proxied any;
    gzip_comp_level 4;
    gzip_types
         text/css
         text/javascript
         text/xml
         text/plain
         application/javascript
         application/x-javascript
         application/json;


    location /static/ {
            autoindex on;
            root /usr/src/app;
    }

    location /media/ {
            autoindex on;
            root /var/django;
    }

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

    # For custom error page
    #error_page 500 502 503 504 /500.html;
    #location = /500.html {
    #  root /usr/src/app/;
    #}
  }
}