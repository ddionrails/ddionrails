worker_processes 1;

user nobody nogroup;
# 'user nobody nobody;' for systems with 'nobody' as a group instead
error_log  /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
  worker_connections 1024; # increase if you have lots of clients
  accept_mutex off; # set to 'on' if nginx worker_processes > 1
  # 'use epoll;' to enable for Linux 2.6+
  # 'use kqueue;' to enable for FreeBSD, OSX
}

http {
  map $http_upgrade $connection_upgrade {
    default upgrade;
    ''      close;
  }


  include mime.types;
  # fallback in case we can't determine a type
  default_type application/octet-stream;
  access_log /var/log/nginx/access.log combined;
  sendfile on;
  fastcgi_read_timeout 300;
  proxy_read_timeout 300;

  upstream app_server {
    # fail_timeout=0 means we always retry an upstream even if it failed
    # to return a good HTTP response

    server 172.16.238.10:8000 fail_timeout=0;
    # for UNIX domain socket setups
    #server unix:/tmp/gunicorn.sock fail_timeout=0;

    # for a TCP configuration
    # server 192.168.0.7:8000 fail_timeout=0;
  }

  ## We do not need host spoofing prevention in development
  # server {
  #   # if no Host match, close the connection to prevent host spoofing
  #   listen 80 default_server;
  #   return 444;
  # }

  server {
    # use 'listen 80 deferred;' for Linux
    # use 'listen 80 accept_filter=httpready;' for FreeBSD
    listen 80;
    client_max_body_size 4G;

    ### No need for a server name in development
    ## set the correct host(s) for your site
    #server_name ; # TODO: Find a way to use ENV vars here 
    keepalive_timeout 5;

    # path for static files
    root /usr/src/app/;

    location / {
      # checks for static file, if not found proxy to app
      try_files $uri @proxy_to_app;
    }

    # Static files will be served by django in development

    location /elastic/ {
            autoindex off;
            proxy_pass http://elasticsearch:9200/;
            proxy_set_header X-Forwarded-For
              $proxy_add_x_forwarded_for;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header Host $host;
            limit_except GET POST {
              deny  all;
            }
    }

    location /statistics-server/ {
            autoindex off;
            proxy_pass http://statistics-server:8081/statistics-server/;
                  proxy_redirect / $scheme://$http_host/;
      proxy_http_version 1.1;
      proxy_set_header Upgrade $http_upgrade;
      proxy_set_header Connection $connection_upgrade;
      proxy_read_timeout 20d;
      proxy_buffering off;
    }

    location @proxy_to_app {
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Proto $scheme;
      proxy_set_header Host $http_host;
      proxy_hide_header X-Frame-Options;
      add_header X-Frame-Options "SAMEORIGIN";
      # we don't want nginx trying to do something clever with
      # redirects, we set the Host: header above already.
      proxy_redirect off;
      proxy_pass http://app_server;
    }

#    error_page 500 502 503 504 /500.html;
#    location = /500.html {
#      root /path/to/app/current/public;
#    }
  }
}
