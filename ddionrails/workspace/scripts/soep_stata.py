# -*- coding: utf-8 -*-

""" Script generators for ddionrails.workspace app: SoepStata """

import json

from ..mixins import SoepMixin
from .script_config import ScriptConfig


class SoepStata(ScriptConfig, SoepMixin):

    NAME = "soep-stata"

    COMMENT = "*"

    DEFAULT_DICT = dict(
        path_in="data/",
        path_out="out/",
        analysis_unit="p",
        private="t",
        gender="b",
        balanced="t",
        age_group="adult",
    )
    DEFAULT_CONFIG = json.dumps(DEFAULT_DICT)

    def __init__(self, script, basket):
        self.basket = basket
        self.script = script
        self.fields = [
            dict(name="path_in", label="Input path", scale="text"),
            dict(name="path_out", label="Output path", scale="text"),
            dict(
                name="analysis_unit",
                label="Analysis Unit",
                scale="select",
                options=dict(p="Individual", h="Household"),
            ),
            dict(
                name="private",
                label="Private households",
                scale="select",
                options=dict(t="Private households only", f="All households"),
            ),
            dict(
                name="gender",
                label="Gender",
                scale="select",
                options=dict(b="Both", m="Male", f="Female"),
            ),
            dict(
                name="balanced",
                label="Sample composition",
                scale="select",
                options=dict(t="balanced", f="unbalanced"),
            ),
            dict(
                name="age_group",
                label="Age group",
                scale="select",
                options=dict(
                    all="All sample members",
                    adult="All adult respondents",
                    no17="All adult repspondents without first time interviewed (age 17)",
                ),
            ),
        ]
        self.default_settings = self.DEFAULT_CONFIG
        self.settings = script.get_settings()
        self.template = "scripts/soep_stata.html"
        self.script_dict_raw = self._generate_script_dict()
        valid_datasets = self._validate_datasets(
            self.script_dict_raw, self.settings["analysis_unit"]
        )
        self.script_dict = {
            x: y for x, y in self.script_dict_raw.items() if x in valid_datasets
        }
        self.years = self._get_selected_years(self.script_dict)

    def get_script_input(self):
        script_input = super().get_script_input()
        script_dict = self.script_dict
        script_input["script_dict"] = script_dict
        script_input["years"] = self.years
        script_input["valid_datasets"] = self._validate_datasets(
            self.script_dict_raw, self.settings["analysis_unit"]
        )
        not_processed_datasets = self._validate_datasets(
            self.script_dict_raw, self.settings["analysis_unit"], valid=False
        )
        script_input["not_processed"] = {
            x: y for x, y in script_input["data"].items() if x in not_processed_datasets
        }
        script_input["text"] = "\n".join(
            [
                self._render_disclaimer(),
                self._render_local_variables(),
                self._render_not_processed(script_input["not_processed"]),
                self._render_pfad(),
                self._render_balanced(),
                self._render_private(),
                self._render_gender(),
                self._render_sort_pfad(),
                self._render_hrf(),
                self._render_create_master(),
                self._render_read_data(),
                self._render_merge(),
                self._render_done(),
            ]
        )
        return script_input

    def _render_disclaimer(self):
        """ Render the disclaimer of the script file """
        return (
            "\n"
            f"{self.COMMENT} --------------------------------------------------------------------.\n"
            f"{self.COMMENT} This command file was generated by paneldata.org                    .\n"
            f"{self.COMMENT} --------------------------------------------------------------------.\n"
            f"{self.COMMENT} !!! I M P O R T A N T - W A R N I N G !!!                           .\n"
            f"{self.COMMENT} You alone are responsible for contents and appropriate.             .\n"
            f"{self.COMMENT} usage by accepting the usage agreement.                             .\n"
            f"{self.COMMENT} --------------------------------------------------------------------.\n"
            f"{self.COMMENT} Please report any errors of the code generated here                 .\n"
            f"{self.COMMENT} to soepmail@diw.de                                                  .\n"
            f"{self.COMMENT} --------------------------------------------------------------------.\n"
        )

    def _render_local_variables(self):
        heading = "\n\n* * * LOCAL VARIABLES * * *\n"
        script = '\nglobal MY_PATH_IN   "%s"' % self.settings["path_in"]
        script += '\nglobal MY_PATH_OUT  "%s"' % self.settings["path_out"]
        script += "\nglobal MY_FILE_OUT  ${MY_PATH_OUT}new.dta"
        script += "\nglobal MY_LOG_FILE  ${MY_PATH_OUT}new.log"
        script += "\ncapture log close"
        script += '\nlog using "${MY_LOG_FILE}", text replace'
        script += "\nset more off"
        return heading + script

    def _render_not_processed(self, not_processed):
        heading = "\n\n%s* * * NOT PROCESSED * * *.\n" % self.COMMENT
        script = ""
        for key, value in not_processed.items():
            script += "%s From datasets '%s': %s.\n" % (self.COMMENT, key, value)
        return heading + script

    def _render_pfad(self):
        heading = "\n\n* * * PFAD * * *\n"
        script = []
        if self.settings["analysis_unit"] == "p":
            script.append("\nuse hhnr persnr sex gebjahr psample")
            for year in self.years:
                script.append("%shhnr %snetto %spop" % (year, year, year))
            script.append('using "${MY_PATH_IN}ppfad.dta", clear')
        else:
            script.append("\nuse hhnr hhnrakt hsample")
            for year in self.years:
                script.append("%shhnr %shnetto %shpop" % (year, year, year))
            script.append('using "${MY_PATH_IN}hpfad.dta", clear')
        return heading + " ".join(script)

    def _render_balanced(self):
        heading = "\n\n* * * BALANCED VS UNBALANCED * * *\n"
        connector = "&" if self.settings["balanced"] == "t" else "|"
        if self.settings["analysis_unit"] == "p":
            temp = []
            for year in self.years:
                if self.settings["age_group"] == "adult":
                    temp.append(" (%snetto >= 10 & %snetto < 20) " % (year, year))
                elif self.settings["age_group"] == "no17":
                    temp.append(" (%snetto >= 10 & %snetto < 16) " % (year, year))
                else:
                    temp.append(" (%snetto > 0 & %snetto < 40) " % (year, year))
            return heading + "\nkeep if (" + connector.join(temp) + ")"
        else:
            temp = []
            for year in self.years:
                temp.append(" (%shnetto == 1) " % year)
            return heading + "\nkeep if (" + connector.join(temp) + ")"

    def _render_private(self):
        heading = "\n\n* * * PRIVATE VS ALL HOUSEHOLDS * * *\n"
        set_name = "pop" if self.settings["analysis_unit"] == "p" else "hpop"
        if self.settings["private"] == "t":
            temp = []
            for year in self.years:
                temp.append(
                    " (%s%s == 1 | %s%s == 2) " % (year, set_name, year, set_name)
                )
            return heading + "\nkeep if (" + "|".join(temp) + ")"
        else:
            return heading + "\n/* all households */"

    def _render_gender(self):
        options = {
            "m": "\nkeep if (sex == 1)",
            "f": "\nkeep if (sex == 2)",
            "b": "\n/* all genders */",
        }
        gender = self.settings.get("gender", "b")
        gender_selection = options[gender]
        return "\n\n* * * GENDER ( male = 1 / female = 2) * * *\n" f"{gender_selection}"

    @staticmethod
    def _render_sort_pfad():
        return "\n\n" "* * * SORT PFAD * * *\n\n" 'save "${MY_PATH_OUT}pfad.dta", replace'

    def _render_hrf(self):
        heading = "\n\n* * * HRF * * *\n"
        if self.settings["analysis_unit"] == "p":
            script = '\nuse "${MY_PATH_IN}phrf.dta", clear'
        else:
            script = '\nuse "${MY_PATH_IN}hhrf.dta", clear'
        script += '\nsave "${MY_PATH_OUT}hrf.dta", replace'
        return heading + script

    def _render_create_master(self):
        heading = "\n\n* * * CREATE MASTER * * *\n"
        key = "persnr" if self.settings["analysis_unit"] == "p" else "hhnrakt"
        script = '\nuse "${MY_PATH_OUT}pfad.dta", clear'
        script += (
            '\nmerge 1:1 %s using "${MY_PATH_OUT}hrf.dta", keep(master match) nogen' % key
        )
        script += '\nsave "${MY_PATH_OUT}master.dta", replace'
        return heading + script

    def _render_read_data(self):
        heading = "\n\n* * * READ DATA * * *\n"
        temp = []
        for dataset in self.script_dict.values():
            script = "\nuse %s" % " ".join(dataset["variables"])
            script += ' using "${MY_PATH_IN}%s.dta", clear' % dataset["name"]
            script += '\nsave "${MY_PATH_OUT}%s.dta", replace' % dataset["name"]
            temp.append(script)
        return heading + "\n\n".join(temp)

    def _render_merge(self):
        heading = "\n\n* * * MERGE DATA * * *\n"
        script = '\nuse   "${MY_PATH_OUT}master.dta", clear'
        for dataset in self.script_dict.values():
            if self.settings["analysis_unit"] != dataset["analysis_unit"]:
                merge_factor = "m:1"
            else:
                merge_factor = "1:1"
            script += (
                '\nmerge %s %s using "${MY_PATH_OUT}%s.dta", keep(master match) nogen'
                % (merge_factor, dataset["key"], dataset["name"])
            )
        return heading + script

    @staticmethod
    def _render_done():
        """ Render an end section of the script file """
        return (
            "\n\n"
            "* * * DONE * * *\n\n"
            'label data "paneldata.org: Magic at work!"\n'
            'save "${MY_FILE_OUT}", replace\n'
            "desc\n\n"
            "log close"
        )
