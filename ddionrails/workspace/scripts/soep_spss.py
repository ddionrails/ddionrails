# -*- coding: utf-8 -*-

""" Script generators for ddionrails.workspace app: SoepSpss """

from typing import Dict

from ..mixins import SoepMixin
from .script_config import ScriptConfig
from .soep_config import SoepConfig


class SoepSpss(SoepConfig, ScriptConfig, SoepMixin):
    """ Script Generator for SPSS scripts """

    NAME = "soep-spss"
    COMMENT = "*"

    def get_script_input(self) -> Dict:
        script_input = super().get_script_input()
        script_dict = self.script_dict
        script_input["script_dict"] = script_dict
        script_input["years"] = self.years
        script_input["valid_datasets"] = self._validate_datasets(
            self.script_dict_raw, self.settings["analysis_unit"]
        )
        not_processed_datasets = self._validate_datasets(
            self.script_dict_raw, self.settings["analysis_unit"], valid=False
        )
        script_input["not_processed"] = {
            x: y for x, y in script_input["data"].items() if x in not_processed_datasets
        }
        script_input["is_special"] = {
            x: y for x, y in script_input["data"].items() if x in {"hhrf", "phrf", "ppfad", "hpfad"}
        }

        script_input["text"] = "\n".join(
            [
                self._render_disclaimer(),
                self._render_local_variables(),
                self._render_not_processed(script_input["not_processed"]),
                self._render_pfad(script_input["is_special"]),
                self._render_balanced(),
                self._render_private(),
                self._render_gender(),
                self._render_sort_pfad(),
                self._render_hrf(script_input["is_special"]),
                self._render_create_master(),
                self._render_read_data(),
                self._render_merge(),
                self._render_done(),
            ]
        )
        return script_input

    def _render_disclaimer(self) -> str:
        """ Render the disclaimer of the script file """
        return (
            "\n"
            f"{self.COMMENT} --------------------------------------------------------------------.\n"
            f"{self.COMMENT} This command file was generated by paneldata.org                    .\n"
            f"{self.COMMENT} --------------------------------------------------------------------.\n"
            f"{self.COMMENT} !!! I M P O R T A N T - W A R N I N G !!!                           .\n"
            f"{self.COMMENT} You alone are responsible for contents and appropriate.             .\n"
            f"{self.COMMENT} usage by accepting the usage agreement.                             .\n"
            f"{self.COMMENT} --------------------------------------------------------------------.\n"
            f"{self.COMMENT} Please report any errors of the code generated here                 .\n"
            f"{self.COMMENT} to soepmail@diw.de                                                  .\n"
            f"{self.COMMENT} --------------------------------------------------------------------.\n"
        )

    def _render_local_variables(self) -> str:
        """ Render a "local variables" section of the script file """
        script = "\nset compression on."
        script += "\nset header off."
        script += "\n"
        script += "\ndataset close all."
        script += "\n"
        script += "\n"
        script += "\n* ### LOCAL VARIABLES ### *."
        script += "\n"
        script += '\ndefine !pathin() "%s" !enddefine.' % self.settings["path_in"]
        script += '\ndefine !pathout() "%s" !enddefine.' % self.settings["path_out"]
        return script

    def _render_not_processed(self, not_processed) -> str:
        """ Render a "not processed" section of the script file """
        heading = "\n\n%s* * * NOT PROCESSED * * *.\n" % self.COMMENT
        script = ""
        for key, value in not_processed.items():
            script += "%s From datasets '%s': %s.\n" % (self.COMMENT, key, value)
        return heading + script

    def _render_pfad(self, special_datasets) -> str:
        """ Render a "load pfad" section of the script file """
        script = "\n* ### LOAD [H|P]PFAD ### *.\n"
        if self.settings["analysis_unit"] == "p":
            script += "\nget file = !pathin+'ppfad.sav'"
            script += "\n   /keep = hhnr persnr sex gebjahr psample"
            for year in self.years:
                script += "\n %shhnr %snetto %spop" % (year, year, year)
            if "ppfad" in special_datasets:
                for variable in special_datasets["ppfad"]:
                    script += "\n %s" % variable
            script += "."
            script += "\ndataset name ppfad window=asis."
        else:
            script += "\nget file = !pathin+'hpfad.sav'"
            script += "\n   /keep = hhnr hhnrakt hsample"
            for year in self.years:
                script += "\n %shhnr %shnetto %shpop" % (year, year, year)
            if "hpfad" in special_datasets:
                for variable in special_datasets["hpfad"]:
                    script += "\n %s" % variable
            script += "."
            script += "\ndataset name hpfad window=asis."
        return script

    def _render_balanced(self) -> str:
        """ Render a "balanced" section of the script file """
        heading = "\n* ### [UN]BALANCED ### *.\n"
        connector = "and" if self.settings["balanced"] == "t" else "or"
        temp = []
        if self.settings["analysis_unit"] == "p":
            for year in self.years:
                if self.settings["age_group"] == "adult":
                    temp.append(" (%snetto ge 10 & %snetto lt 20)" % (year, year))
                elif self.settings["age_group"] == "no17":
                    temp.append(" (%snetto ge 10 & %snetto lt 16)" % (year, year))
                else:
                    temp.append(" (%snetto gt 0 & %snetto lt 40)" % (year, year))
            return heading + "\nselect if (" + connector.join(temp) + ")."
        else:
            for year in self.years:
                temp.append(" (%shnetto eq 1)" % year)
            return heading + "\nselect if (" + connector.join(temp) + ")."

    def _render_private(self) -> str:
        """ Render a "private households" section of the script file """
        heading = "\n* ### PRIVATE HOUSEHOLDS ### *.\n"
        set_name = "pop" if self.settings["analysis_unit"] == "p" else "hpop"
        if self.settings["private"] == "t":
            temp = []
            for year in self.years:
                temp.append(" (%s%s eq 1 | %s%s eq 2)" % (year, set_name, year, set_name))
            return heading + "\nselect if (" + "|".join(temp) + ")."
        else:
            return heading + "\n* all households *."

    def _render_gender(self) -> str:
        """ Render a "gender" section of the script file """
        if self.settings["analysis_unit"] == "p":
            heading = "\n* ### GENDER ( male = 1 / female = 2) ### *.\n"
            gender = self.settings.get("gender", "b")
            if gender == "m":
                return heading + "\nselect if (sex = 1)."
            elif gender == "f":
                return heading + "\nselect if (sex = 2)."
            else:
                return heading + "\n* all genders *."
        else:
            return "\n* ### GENDER NOT FOR HOUSEHOLDS ### *.\n"

    def _render_sort_pfad(self) -> str:
        """ Render a "sort pfad" section of the script file """
        script = "\n* ### SORT [H|P]PFAD ### *.\n"
        if self.settings["analysis_unit"] == "p":
            script += "\nsort cases by persnr."
            script += "\nsave outfile = !pathout+'ppfad.sav'."
        else:
            script += "\nsort cases by hhnrakt."
            script += "\nsave outfile = !pathout+'hpfad.sav'."
        return script

    def _render_hrf(self, special_datasets) -> str:
        """ Render a "load hrf" section of the script file """
        script = "\n* ### LOAD [H|P]HRF ### *.\n"
        hrf_dataset = ""
        sortvar = ""
        if self.settings["analysis_unit"] == "p":
            hrf_variables =["hhnr", "persnr", "prgroup"]
            hrf_dataset = "phrf"
            sortvar = "persnr"
            for year in self.years:
                hrf_variables.append("{}phrf".format(year))
            if "phrf" in special_datasets:
                for variable in special_datasets["phrf"]:
                    hrf_variables.append("{}".format(variable))
        else:
            hrf_variables =["hhnr", "hhnrakt", "hrgroup"]
            hrf_dataset = "hhrf"
            sortvar = "hhnrakt"
            for year in self.years:
                hrf_variables.append("{}hhrf".format(year))
            if "hhrf" in special_datasets:
                for variable in special_datasets["hhrf"]:
                    hrf_variables.append("{}".format(variable))
        hrf_list = list(set(hrf_variables))

        script += "\nget file !pathin+'{}.sav'".format(hrf_dataset)
        script += "\n/keep = {}.".format(', '.join(hrf_list))
        script += "\ndataset name {} window=asis.".format(hrf_dataset)
        script += "\nsort cases by {}.".format(sortvar)
        script += "\nsave outfile = !pathout+'hrf.sav'."

        return script

    def _render_create_master(self) -> str:
        """ Render a "create master" section of the script file """
        key = "persnr" if self.settings["analysis_unit"] == "p" else "hhnrakt"
        script = "\n* ### CREATE MASTER ### *.\n"
        if self.settings["analysis_unit"] == "p":
            script += "\nmatch files file  = !pathout+'ppfad.sav'"
        else:
            script += "\nmatch files file  = !pathout+'hpfad.sav'"
        script += "\n           /table = !pathout+'hrf.sav'"
        script += "\n           /by      %s hhnr." % key
        script += "\nsort cases by %s." % key
        script += "\nsave outfile = !pathout+'master.sav'."
        return script

    def _render_read_data(self) -> str:
        """ Render a "read data" section of the script file """
        script = "\n* ### READ DATA ### *."
        for dataset in self.script_dict.values():
            if dataset["is_special"] == True:
                continue
            list_variables = set.copy(dataset["variables"])
            if dataset["analysis_unit"] == "p":
                for var in dataset["variables"]:
                    if var.endswith("hhnr"):
                        list_variables.remove(var)
            script += "\n\nget file = !pathin+'%s.sav'" % dataset["name"]
            script += "\n   /keep = %s." % " ".join(list_variables)
            script += "\ndataset name %s window=asis." % dataset["name"]
            script += "\nsort cases by %s." % dataset["merge_id"]
            script += "\nsave outfile = !pathout+'%s.sav'." % dataset["name"]
        return script

    def _render_merge(self) -> str:
        """ Render a "merge" section of the script file """
        script = "\n* ### MERGE ### *.\n"
        script += "\nget  file = !pathout+'master.sav'."
        script += "\ndataset name master window=asis."
        for dataset in self.script_dict.values():
            if dataset["is_special"] == True:
                continue
            script += "\n\nsort cases by %s." % dataset["merge_id"]
            script += "\nmatch files file = *"
            script += "\n          /table = !pathout+'%s.sav'" % dataset["name"]
            script += "\n          /by    = %s." % dataset["merge_id"]
        return script

    @staticmethod
    def _render_done() -> str:
        """ Render a "done" section of the script file """
        return (
            "\n"
            "* ### DONE ### *.\n\n"
            "dataset close all.\n"
            "dataset name new.\n"
            "dataset activate new.\n"
            'file label "paneldata.org".\n'
            "save outfile = !pathout+'new.sav'.\n"
            "desc all."
        )
